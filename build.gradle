import com.google.gson.Gson
import com.google.gson.JsonArray
import com.google.gson.JsonElement
import com.google.gson.JsonObject

import java.nio.file.Files

//file:noinspection GroovyAssignabilityCheck
plugins {
	id 'fabric-loom' version '1.4-SNAPSHOT'
	id "com.modrinth.minotaur" version "2.+"
}

version = "${mod_version}+${mod_version_type}.${System.getenv("GITHUB_RUN_NUMBER") == null ? "dev" : System.getenv("GITHUB_RUN_NUMBER")}"
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
}

def replacements = [
  	"version": project.version,
	"minecraft_version": project.mod_minecraft_version,
	"loader_version": project.loader_version
]

processResources {
	inputs.properties(replacements)

	filesMatching("fabric.mod.json") {
		expand replacements
	}
}

// Configure the modrinth publication
modrinth {
	token = System.getenv("MODRINTH_TOKEN")
	projectId = "${mod_project_id}"
	versionNumber = "${version}+${minecraft_version}"
	versionName = "${mod_version} for ${minecraft_version}"
	versionType = "${mod_version_type}"
	changelog = generateChangelog()
	uploadFile = remapJar
	gameVersions = ["${minecraft_version}"]

	syncBodyFrom = rootProject.file("README.md").text;
}

tasks.modrinth.dependsOn(tasks.modrinthSyncBody)

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// Credits: https://github.com/RelativityMC/VMP-fabric
static String generateChangelog() {
	final String path = System.getenv("GITHUB_EVENT_RAW_PATH");
	if (path == null || path.isBlank()) return "No changelog was specified. ";
	final JsonObject jsonObject = new Gson().fromJson(Files.readString(java.nio.file.Path.of(path)), JsonObject.class);

	StringBuilder builder = new StringBuilder();
	builder.append("This version is uploaded automatically by GitHub Actions.  \n\n")
			.append("Changelog:  \n");
	final JsonArray commits = jsonObject.getAsJsonArray("commits");
	if (commits.isEmpty()) {
		builder.append("No changes detected. \n");
	} else {
		for (JsonElement commit : commits) {
			JsonObject object = commit.getAsJsonObject();
			builder.append("- ");
			builder.append('[').append(object.get("id").getAsString(), 0, 8).append(']').append('(').append(object.get("url").getAsString()).append(')');
			builder.append(' ');
			builder.append(object.get("message").getAsString().split("\n")[0]);
			builder.append(" - ");
			builder.append(object.get("author").getAsJsonObject().get("name").getAsString());
			builder.append("  ").append('\n');
		}
	}
	return builder.toString();
}